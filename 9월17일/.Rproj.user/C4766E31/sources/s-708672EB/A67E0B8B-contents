##데이터 전처리
trA <- dftr[,-c(10,11)]
testA <- dftest
trA$season <- as.factor(trA$season)
trA$holiday <- as.factor(trA$holiday)
trA$workingday <- as.factor(trA$workingday)
trA$weather <- as.factor(trA$weather)
trA$datetime <- as.POSIXct(trA$datetime, format="%Y-%m-%d %H:%M:%S")

testA$season <- as.factor(testA$season)
testA$holiday <- as.factor(testA$holiday)
testA$workingday <- as.factor(testA$workingday)
testA$weather <- as.factor(testA$weather)
testA$datetime <- as.POSIXct(testA$datetime, format="%Y-%m-%d %H:%M:%S")

####파생변수 생성
trA$day = strftime(trA$datetime, '%d')
class(trA$day)
trA$hour = substring(trA$datetime,12,13)
trA$hour = as.factor(substring(trA$datetime,12,13))
trA$weekday <-strftime(trA$datetime, '%u') 
str(trA)

####test데이터

testA$day = strftime(testA$datetime, '%d')
testA$hour = substring(testA$datetime,12,13)
testA$hour = as.factor(substring(testA$datetime,12,13))
testA$weekday <-strftime(testA$datetime, '%u')  


trA <- trA[,-c(1)]
testA<- testA[,-c(1)]
names(trA)


trA_h <- trA
th<- testA
trA_h$hour = as.integer(trA_h$hour)
th$hour <- as.integer(th$hour)
th$weekday <- as.factor(th$weekday)

trA_h$busy <- trA_h$hour
th$busy <- th$hour

trA_h[trA_h$busy < 8 , "busy"]<-1
trA_h[trA_h$busy >=8 & trA_h$busy <11, "busy"]<-2
trA_h[trA_h$busy >=11 & trA_h$busy <17, "busy"]<-3
trA_h[trA_h$busy >=17 & trA_h$busy <22, "busy"]<-4
trA_h[trA_h$busy >=22 , "busy"]<-5

th[th$busy < 8 , "busy"]<-1
th[th$busy >=8 & th$busy <11, "busy"]<-2
th[th$busy >=11 & th$busy <17, "busy"]<-3
th[th$busy >=17 & th$busy <22, "busy"]<-4
th[th$busy >=22 , "busy"]<-5

trA_h$busy <- as.factor(trA_h$busy)
th$busy <- as.factor(th$busy)

trA_h <- trA_h[,-c(11)]
th<- th[,-c(10)]
names(trA_h)

#####랜덤포레스트

install.packages("randomForest")
library(randomForest)

## 1. 랜덤 포레스트를 사용한 모델링
result = randomForest(count~hour, data=trA, importance=T)
summary(result)
result
preval_R <- predict(result, newdata=testA)
preval_R
preval_R[preval<=0] <- 0
reddf$count <- preval_R
write.csv(reddf, file="result_R4.csv", row.names=FALSE)
getwd()

str(trA_c)
str(testA)
str(th)
###1. step를 이용한 별수 설ㅈ
str(trA)
Lm <- lm(count~., data=trA)
step(Lm, direction = "both")
Lm <- lm(count ~ season + weather + temp + atemp + humidity + 
           windspeed + hour + weekday, data=trA)
preval <- predict(Lm, newdata=testA)

reddf <- resdf
preval[preval<=0]<-0
resdf$count <- preval