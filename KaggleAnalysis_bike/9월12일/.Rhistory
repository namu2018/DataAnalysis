str(trA_h)
trA_h <- trA
setwd("C:/Users/ktm/Downloads/all/choi/bike")
##데이터 불러오기
dftr <- read.csv("train.csv", stringAsFactors=F)
##데이터 불러오기
dftr <- read.csv("train.csv")
dftest <- read.csv("test.csv")
##데이터 전처리
trA <- dftr[,-c(10,11)]
testA <- dftest
trA$season <- as.factor(trA$season)
trA$holiday <- as.factor(trA$holiday)
trA$workingday <- as.factor(trA$workingday)
trA$weather <- as.factor(trA$weather)
trA$datetime <- as.POSIXct(trA$datetime, format="%Y-%m-%d %H:%M:%S")
testA$season <- as.factor(testA$season)
testA$holiday <- as.factor(testA$holiday)
testA$workingday <- as.factor(testA$workingday)
testA$weather <- as.factor(testA$weather)
testA$datetime <- as.POSIXct(testA$datetime, format="%Y-%m-%d %H:%M:%S")
####파생변수 생성
trA$day = strftime(trA$datetime, '%d')
class(trA$day)
trA$hour = substring(trA$datetime,12,13)
trA$hour = as.factor(substring(trA$datetime,12,13))
trA$weekday <-strftime(trA$datetime, '%u')
str(trA)
testA$day = strftime(testA$datetime, '%d')
testA$hour = substring(testA$datetime,12,13)
testA$hour = as.factor(substring(testA$datetime,12,13))
testA$weekday <-strftime(testA$datetime, '%u')
trA <- trA[,-c(1)]
testA<- testA[,-c(1)]
trA_h <- trA
trA_h$hour = as.integer(trA_h$hour)
trA_h$busy <- trA_h$hour
trA_h[trA_h$busy >=8 & trA_h$busy <11, "busy"]<-2
trA_h[trA_h$busy >=8 & trA_h$busy <11, "busy"]<-2
trA_h[trA_h$busy >=11 & trA_h$busy <17, "busy"]<-3
trA_h[trA_h$busy >=17 & trA_h$busy <22, "busy"]<-4
trA_h[trA_h$busy >=22 , "busy"]<-5
str(trA_h)
trA_h$busy <- as.factor(trA_h$busy)
trA_h<- trA_h[,-c(11)]
str(trA_h)
install.packages("alr3")
library(alr3)
data(Mitchell)
dim(Mitchell)
str(Mitchell)
range(Mitchell$Month)
############t
with(Mitchel, cor.test(Month, Temp))
############t
with(Mitchell, cor.test(Month, Temp))
##
library(ggplot2)
ggplot(data=Mitchell, aes(x=Month, y=Temp))+geom_point()
range(Michell$Month)
range(Mitchell$Month)
ggplot(data=Mitchell, aes(x=month, y=Temp)) geom_point() + scale_x_discrete(limits=seq(0,203,12))
ggplot(data=Mitchell, aes(x=month, y=Temp))+ geom_point() + scale_x_discrete(limits=seq(0,203,12))
ggplot(data=Mitchell, aes(x=Month, y=Temp))+ geom_point() + scale_x_discrete(limits=seq(0,203,12))
setwd("C:/Users/ktm/Downloads")
pf<-read.csv('pseudo_facebook01.tsv', sep='\t')
plot(pf$age, pf$friend_count)
trA_h
View(trA_h)
boxplot(pf$age)
library(dplyr)
pf_70 <- pf %>% filter(age<70)
cor.test(pf_70$age, pf_70$friend_count)
pf_70 <- pf %>% filter(age<=70)
cor.test(pf_70$age, pf_70$friend_count)
whth(subset(pf, age<70), cor(age, frient_count, method="pearson"))
trA_h<-trA_h[,-c(13)]
str(trA_h)
trA_h <- trA
trA_h$hour = as.integer(trA_h$hour)
trA_h$busy <- trA_h$hour
str(trA)
View(trA_h)
View(trA_h)
trA_h[trA_h$busy < 8 , "busy"]<-1
trA_h[trA_h$busy >=8 & trA_h$busy <11, "busy"]<-2
trA_h[trA_h$busy >=11 & trA_h$busy <17, "busy"]<-3
trA_h[trA_h$busy >=17 & trA_h$busy <22, "busy"]<-4
trA_h[trA_h$busy >=22 , "busy"]<-5
iris_norm<- as.data.frame(iris[,1:4],2,function(x) (x-min(x))/max(x)-min(x)))
iris_norm<- as.data.frame(apply(iris[,1:4],2,function(x) (x-min(x))/max(x)-min(x)))
iris_norm
iris_norm<- as.data.frame(apply(iris[,1:4],2,function(x) (x-min(x))/(max(x)-min(x))))
iris_norm
trA_h
str(trA_h)
trA_h<- trA_h[,-c(11)]
trA_h$busy <- as.factor(trA_h$busy)
str(trA_h)
## 1. 랜덤 포레스트를 사용한 모델링
result = randomForest(count~season+temp+humidity+windspeed+day+weekday+busy, data=trA_h, importance=T)
install.packages("randomForest")
library(randomForest)
## 1. 랜덤 포레스트를 사용한 모델링
result = randomForest(count~season+temp+humidity+windspeed+day+weekday+busy, data=trA_h, importance=T)
summary(result)
th<- testA
th$hour <- as.integer(th$hour)
th$busy<- th$hour
th[th$busy < 8 , "busy"]<-1
th[th$busy >=8 & th$busy <11, "busy"]<-2
th[th$busy >=11 & th$busy <17, "busy"]<-3
th[th$busy >=17 & th$busy <22, "busy"]<-4
th[th$busy >=22 , "busy"]<-5
th$busy <- as.factor(th$busy)
th<- th[,-c(11)]
preval_R <- predict(result, th)
View(th)
testA$weekday <-strftime(testA$datetime, '%u')
testA$weekday <-as.factor(weekdays(as.Date(testA$datetime)))
