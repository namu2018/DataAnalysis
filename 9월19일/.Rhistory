setwd("C:/Users/ktm/Documents/choi_dontouch/data/hospital")
hos <- read.csv("train.csv")
hos_test <- read.csv("test.csv")
library(dplyr)
library(corrplot)
sqldf('select instkind, count(instkind),sum(revenue1) from hos where OC=" close"  group by instkind ')
#inskind로 그룹핑 하여 자른다
library(sqldf)
sqldf('select instkind, count(instkind),sum(revenue1) from hos where OC=" close"  group by instkind ')
sqldf('select instkind, count(instkind),mean(revenue1) from hos where OC=" close"  group by instkind ')
sqldf('select instkind, count(instkind),avg(revenue1) from hos where OC=" close"  group by instkind ')
sqldf('select instkind, count(instkind),avg(revenue1) from hos where OC=" close"  group by instkind ')
sqldf('select instkind, count(instkind),avg(profit1) from hos where OC=" close"  group by instkind ')
tr <- read.csv("train.csv")
test <- read.csv("test.csv")
##1. tr데이터 전처리
# (1)변수를 선택해준다
str(tr)
names(tr)
tr_sub <- tr[,-c(56,57,6,58)]
str(tr_sub)
tr_sbu <- select(tr,-c(employee2, employee1, bedcount, ownerChange))
tr_sub_noNA <- tr_sub[!is.na(tr_sub$salary1),]
library(randomForest)
rf_model <- randomForest(factor(OC) ~., data=tr_sub_noNA)
importance <- importance(rf_model)
importance
sel<- c('revenue1','sga1','salary1','interest1', 'profit1')
tr_sbu <- select(tr,-c(employee2, employee1, bedCount, ownerChange))
test_sub <- select (test, -c(sel))
test_sub1 <- test_sub[,sel]
test_sub <- select (test, -c(employee2, employee1, bedCount, ownerChange))
test_sub1 <- test_sub[,sel]
missmap(test_sub1)
cnt=length(test_sub1)
test_sub1
class(test_sub1)[1]
test_sub1[1]
test_sub1[[1]]
class(test_sub1[1])
class(test_sub1[[1]])
class(test_sub1)[[1]]
for ( i in 1:cnt ){
type = class(test_sub1[[i]])
if (type == "numeric"){
###평균값 구하고/ NA위치 확인/값을 평균값으로 치환
meanVal =mean(test_sub1[[i]], na.rm=T)
loc=which(is.na(test_sub1[[i]]))
test_sub1[loc,i]=meanVal
}
}
missmap(test_sub1)
prediction <- predict(rf_model, newdata=test_sub1)
library(Amelia)
missmap(test_sub1)
rf_model <- randomForest(factor(OC) ~ revenue1+sga1+salary1+interest1+profit1, data=tr_sub_noNA)
prediction <- predict(rf_model, newdata=test_sub1)
pre_chahge <- ifelse(prediction=='open',1,0)
re <- read.csv("submission_sample")
re <- read.csv("submission_sample.csv")
str(re)
re$OC <- pre_change
re$OC <- pre_chahge
re
write.csv(re, "C:/Users/ktm/Documents/choi_dontouch/data/hospital/result.csv", row.names=FALSE)
test
plot(test$OC, test$profit)
plot(test$OC, test$profit1)
names(test)
plot(test$OC, test$profit2)
View(test)
View(test)
test1 <- na.omit(test)
plot(test1$OC, test1$profit2)
sqldf('select * from test where profit='N/A'')
sqldf('select * from test where profit="N/A")
View(test)
View(test)
View(test)
View(test)
hos <- read.csv("train.csv")
hos_test <- read.csv("test.csv")
hos1 <- na.omit(hos)
plot(a$OC, a$revenue1)
plot(a$OC, a$sgg)
plot(a$OC, a$bedCount)
hos <- read.csv("train.csv")
hos_test <- read.csv("test.csv")
hos1 <- na.omit(hos)
setwd("C:/Users/ktm/Documents/choi_dontouch/data/hospital")
hos <- read.csv("train.csv")
hos_test <- read.csv("test.csv")
hos1 <- na.omit(hos)
a <- hos1[,c(1:8,16,32,40,56,57,58)]
plot(a$OC, a$revenue1)
plot(a$OC, a$sgg)
plot(a$OC, a$bedCount)
plot(a$OC, a$revenue2)
plot(a$revenue1, a$profit1)
plot(a$OC, a$totalrev1)
hos <- sqldf('select * from hos1 where revenue1 < 30000000000')
library(sqldf)
hos <- sqldf('select * from hos1 where revenue1 < 30000000000')
plot(hos$OC, as.integer(hos$employee2))###차이 많이남
plot(hos$OC, hos$debt2)##차이남
plot(hos$OC, hos$NCLiabilities2)###차이
plot(hos$OC, hos$shortLoan2)##차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$surplus2)
plot(hos$OC, hos$inventoryAsset1)##
plot(hos$OC, hos$receivableS1)
plot(hos$OC, hos$receivableS1)
plot(hos$OC, hos$debt2)##차이남
plot(hos$OC, hos$interest1)# 이자지출이 많다
plot(hos$OC, hos$liquidAsset1)###유동자산이 많다
hos <- read.csv("train.csv")
hos <- na.omit(hos)
OC <- sqldf('select instkind, count(instkind),sum(revenue1) from hos where OC=" close"  group by instkind ')
close <- sqldf('select instkind, count(instkind),sum(revenue1) from hos where OC=" close"  group by instkind ')
open <- sqldf('select instkind, count(instkind),sum(revenue1) from hos where OC=" open"  group by instkind ')
closel <- sqldf('select instkind, count(instkind),mean(revenue1), mean(profit1) from hos1 where OC=" close"  group by instkind ')
close <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC=" close"  group by instkind ')
open <- sqldf('select instkind, count(instkind),avg(revenue1). avg(profit1) from hos where OC=" open"  group by instkind ')
open <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC=" open"  group by instkind ')
hos1 <- sqldf('select * from hos1 where revenue1 < 30000000000')
closel <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos1 where OC=" close"  group by instkind ')
openl <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos1 where OC=" open"  group by instkind ')
close
open
str(hos)
open <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC="open"  group by instkind ')
openl <- sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos1 where OC="open"  group by instkind ')
open1
close
open
str(hos)'select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC="open"  group by instkind '
sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC="open"  group by instkind ')
sqldf('select instkind, count(instkind),sum(revenue1), avg(profit1) from hos where OC="open"  group by instkind ')
options("scipen" = 100)
sqldf('select instkind, count(instkind),sum(revenue1), avg(profit1) from hos where OC="open"  group by instkind ')
sqldf('select instkind, count(instkind),avg(revenue1), avg(profit1) from hos where OC="open"  group by instkind ')
sqldf('select instkind, count(instkind),sum(revenue1), sum(profit1) from hos where OC="open"  group by instkind ')
sqldf('select instkind, count(instkind),sum(revenue1), sum(profit1) from hos where OC=" close"  group by instkind ')
View(hos)
View(hos)
View(hos)
View(hos)
rowcount
hos <- read.csv("train.csv")
hos_test <- read.csv("test.csv")
sqldf('delete from hos where revenu1='N/A'')
#inskind로 그룹핑 하여 자른다
library(sqldf)
hos
sqldf('delete from hos where revenu1='NA'')
sqldf('select  from hos where revenu1='NA'')
sqldf('select * from hos where revenu1='NA'')
sqldf('select * from hos where revenu1="NA"')
sqldf('select * from hos where revenu1="NA"')
sqldf('select * from hos where revenue1='NA')
sqldf('select * from hos where revenue1='NA'')
sqldf('select * from hos where revenue1="NA")
sqldf('select * from hos where revenue1="NA" ')
sqldf('select * from hos where revenue1="NA" ')
sqldf('select * from hos where revenue1="NA" ')
plot(hos$OC, hos$NCLiabilities2)###차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$shortLoan2)
plot(hos$OC, hos$liquidAsset1)###유동자산이 많다
plot(hos$OC, hos$interest1)# 이자지출이 많다
plot(hos$OC, hos$liquidAsset1)###유동자산이 많다
hos <- sqldf('select * from hos1 where revenue1 < 30000000000')
plot(hos$OC, hos$interest1)# 이자지출이 많다
plot(hos$OC, hos$liquidAsset1)###유동자산이 많다
plot(hos$OC, hos$longLoan2)###차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$shortLoan2)##차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$longLoan2)###차이
plot(hos$OC, hos$shortLoan2)##차이
plot(hos$OC, hos$shortLoan2)##차이
plot(hos$OC, hos$longLoan1)###차이
plot(hos$OC, hos$inventoryAsset1)##
plot(hos$OC, hos$NCLiabilities2)###차이
plot(hos$OC, hos$NCLiabilities1)###차이
plot(hos$OC, hos$NCLiabilities2)###차이
plot(hos$OC, hos$debt2)##차이남
plot(hos$OC, hos$debt1)
plot(hos$OC, hos$debt2)##차이남
plot(hos$OC, as.integer(hos$employee2))###차이 많이남
plot(hos$OC, as.integer(hos$employee1))###차이 많이남
str(test)
str(hos)
str(hos_test)
print("execute function")
sampleFnc()
sampleFnc()<- function(){
print("execute function")
}
sampleFnc()<- function(){
print("execute function")
}
a()<- function(){
print("execute function")
}
print("execute function")
sampleFnc()
print("execute function")
sampleFnc()
print("execute function")
sampleFnc1()
View(openl)
View(openl)
View(open)
View(open)
sampleFnc1() <- function(){
print("execute function")
}
sampleFnc1() <- function(){
print("execute function")
}
sampleFnc1 <- function(){
print("execute function")
}
sampleFnc1()
sampleFnc <- function(){
print("execute function")
}
sampleFnc()
sampleFnc1 <- function(a,b){
c= a+b
return(c)
}
sampleFnc1(3,5)
res=sampleFnc1(3,5)
res
oper <- function(a,b,c='+'){
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}
oper(3,5,'*')
else {return(b)}}
else
oper <- function(a,b,c='+', max=FALSE){
if (max==TRUE){ if(a>b){return(a)}
else {return(b)}}
else{}
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}}
else{
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}}
}
}
oper <- function(a,b,c='+', max=FALSE)
{
if (max==TRUE){ if(a>b){return(a)}
else {return(b)}}
else{
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}
}
oper <- function(a,b,c='+', max=FALSE)
{
if (max==TRUE){ if(a>b){return(a)}
else {return(b)}}
else{
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}
}
oper <- function(a,b,c='+', max=FALSE)
{
if (max==TRUE){ if(a>b){return(a)}
else {return(b)}}
else{
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}
}
oper <- function(a,b,c='+', max=FALSE)
{
if (max==TRUE){ if(a>b){return(a)}
else {return(b)}}
else{
if (c=='+'){ return(a+b)}
if (c=='-'){ return(a-b)}
if (c=='*'){ return(a*b)}
}
}
oper(3,5)
oper(3,5,max)
oper(3,5,max=TRUE)
setwd("C:/Users/ktm/Documents/choi_dontouch/data/hospital")
tr <- read.csv("train.csv")
test <- read.csv("test.csv")
library(dplyr)
library(corrplot)
### (1) 학습용 데이터를 전처리
### 변수를 선택해 준다.
missmap(tr)
## tr_sub <- employee2, employee1, bedCount, ownerChange 열을 뺀다.
tr_sub <- select(tr, -c( bedCount, ownerChange) )
tr_sub_noNA <- tr_sub[  !is.na(tr_sub$salary1),    ]
library(randomForest)
return(df)
readfile <- function(filename, type='csv'){
if(type=='csv'){ df <- read.csv(filename)}
if(type=='txt'){ df <- read.txt(filename)}
if(type=='spss'){df <- read.spss(filename)}
return(df)
}
del_na <- function(df$column) {
df <- df[  !is.na(df$column),    ]
return(df)
}
df <- df[!is.na(df$col), ]
df <- na.omit(data)
del_na <- function(data) {
df <- na.omit(data)
return(df)
}
hos <- read.csv("train.csv")
del_na(hos)
